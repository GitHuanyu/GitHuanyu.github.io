{"meta":{"title":"CHY","subtitle":"CHY&ZYC","description":null,"author":"陈环宇","url":"https://githuanyu.github.io"},"pages":[{"title":"categories","date":"2018-05-15T07:43:42.000Z","updated":"2018-05-16T06:19:53.440Z","comments":true,"path":"categories/index.html","permalink":"https://githuanyu.github.io/categories/index.html","excerpt":"","text":"JS插件方便实现一些特效的好用的组件hexo搭建博客的方法，命令行，目录结构闲聊和技术不想关的内容"},{"title":"tags","date":"2018-05-15T07:43:30.000Z","updated":"2018-05-15T07:43:30.207Z","comments":true,"path":"tags/index.html","permalink":"https://githuanyu.github.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-05-15T07:30:29.000Z","updated":"2018-05-16T06:11:57.885Z","comments":true,"path":"about/index.html","permalink":"https://githuanyu.github.io/about/index.html","excerpt":"","text":"自我介绍，无名小站"}],"posts":[{"title":"构造函数的继承","slug":"构造函数的继承","date":"2018-05-17T02:15:58.000Z","updated":"2018-05-17T07:03:34.094Z","comments":true,"path":"2018/05/17/构造函数的继承/","link":"","permalink":"https://githuanyu.github.io/2018/05/17/构造函数的继承/","excerpt":"","text":"12345678function Animal()&#123; this.species = '动物';&#125;function Cat(name,color)&#123; this.name = name; this.color = color;&#125; 如何使Cat()继承Animal()???如果Cat()的prototype对象，指向一个Animal()的实例，那么所有Cat()的实例，就能继承Animal() 1234Cat.prototype = new Animal();Cat.prototype.constructor = Cat;var cat1 = new Cat(\"大毛\",\"黄色\");alert(cat1.species); // 动物 line1将Cat的prototype对象指向了一个Animal()的实例，它相当于完全删除了prototype对象原先的值，然后赋予一个新值 1234567891011121314// 这是Cat原先的prototype对象&#123; constructor: Cat, // 任何一个prototype对象都有一个constructor属性，指向它的构造函数&#125; // 指向Animal()实例后的新prototype对象&#123; species: '动物', prototype: &#123; constructor: Animal &#125; // 每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性&#125; line2此时Cat()的实例的 constructor 会指向 Animal()，会导致继承链的紊乱，需要手动纠正 1234// 如果替换了prototype对象o.prototype = &#123;&#125;;// 下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。o.prototype.constructor = o;","categories":[{"name":"JS高级","slug":"JS高级","permalink":"https://githuanyu.github.io/categories/JS高级/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://githuanyu.github.io/tags/javascript/"}]},{"title":"prototype的设定由来","slug":"prototype的设定由来","date":"2018-05-16T09:30:08.000Z","updated":"2018-05-17T02:26:34.736Z","comments":true,"path":"2018/05/16/prototype的设定由来/","link":"","permalink":"https://githuanyu.github.io/2018/05/16/prototype的设定由来/","excerpt":"","text":"在js语言中，new命令之后跟的不是类，而是构造函数 对构造函数使用 new，会生成一个对象的实例 构造函数中的 this 关键字，它代表新创建的实例对象 但是用构造函数生成实例对象，有一个缺点，就是无法共享属性和方法 12345678910function Dog(name)&#123; this.name = name; this.species = '犬科';&#125;var dogA = new Dog('AA');var dogB = new Dog('BB');dogA.species = '猫科';alert(dogB.species); //显示 犬科，而不会受到dogA的影响 此时dogA和dogB会自动含有一个 constructor 属性，指向它们的构造函数1dogA.constructot == Dog 考虑到这一点，构造函数有了一个 prototype 属性 12345678910function Dog(name)&#123; this.name = name;&#125;Dog.prototype = &#123; species : '犬科' &#125;;var dogA = new Dog('大毛');var dogB = new Dog('二毛');alert(dogA.species); // 犬科alert(dogB.species); // 犬科 这个属性包含一个对象（以下简称”prototype对象”），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。 实例对象一旦创建，将自动引用prototype对象的属性和方法。也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。 现在，species属性放在prototype对象里，是两个实例对象共享的。只要修改了prototype对象，就会同时影响到两个实例对象。 1234567Dog.prototype.species = '猫科';Dog.prototype.eat = function()&#123; alert('我在吃');&#125;alert(dogA.species); // 猫科alert(dogB.species); // 猫科 此时实例中的species属性和eat()方法，其实都是一个内存地址，指向prototype对象，因此提高了运行效率","categories":[{"name":"JS高级","slug":"JS高级","permalink":"https://githuanyu.github.io/categories/JS高级/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://githuanyu.github.io/tags/javascript/"}]},{"title":"animate.css","slug":"animate-css","date":"2018-05-16T05:47:25.000Z","updated":"2018-05-16T05:57:26.660Z","comments":true,"path":"2018/05/16/animate-css/","link":"","permalink":"https://githuanyu.github.io/2018/05/16/animate-css/","excerpt":"","text":"A cross-browser library of CSS animations项目地址https://github.com/daneden/animate.css 演示地址https://daneden.github.io/animate.css/ 12345678910111213141516171819//为元素添加动画效果$('#yourElement').addClass('animated bounceOutLeft');or$('#yourElement').animateCss('bounce');//添加动画执行之后的回调$('#yourElement').animateCss('bounce', function() &#123; // Do somthing after animation&#125;);//调整动画执行的参数#yourElement &#123; //持续时间 -vendor-animation-duration: 3s; //延迟多久后执行 -vendor-animation-delay: 2s; //执行次数 -vendor-animation-iteration-count: infinite;&#125;","categories":[{"name":"JS插件","slug":"JS插件","permalink":"https://githuanyu.github.io/categories/JS插件/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://githuanyu.github.io/tags/jQuery/"}]},{"title":"Notyf","slug":"Notyf","date":"2018-05-16T03:28:05.000Z","updated":"2018-05-16T03:37:19.722Z","comments":true,"path":"2018/05/16/Notyf/","link":"","permalink":"https://githuanyu.github.io/2018/05/16/Notyf/","excerpt":"","text":"Notyf is a dead simple, responsive, vanilla javascript notification plugin. No jQuery required.项目地址https://github.com/caroso1222/notyf 123456789101112131415//实例化var notyf = new Notyf();//实例化传入配置参数var notyf = new Notyf(&#123; delay:1000, alertIcon: 'fa fa-exclamation-circle', confirmIcon: 'fa fa-check-circle' &#125;)//警告弹框，红色notyf.alert('aaa');//通知弹框，绿色notyf.confirm('bbb');","categories":[{"name":"JS插件","slug":"JS插件","permalink":"https://githuanyu.github.io/categories/JS插件/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://githuanyu.github.io/tags/javascript/"}]},{"title":"jqPaginator","slug":"jqPaginator","date":"2018-05-16T03:05:47.000Z","updated":"2018-05-16T03:38:21.592Z","comments":true,"path":"2018/05/16/jqPaginator/","link":"","permalink":"https://githuanyu.github.io/2018/05/16/jqPaginator/","excerpt":"","text":"基于jquery的分页组件项目地址https://github.com/keenwon/jqPaginator 演示地址http://jqpaginator.keenwon.com/ 12345678&lt;ul class=\"pagination\" id=\"pagination\"&gt;&lt;/ul&gt;$('#pagination').jqPaginator(&#123; totalPages: 100, visiblePages: 10, currentPage: 1, onPageChange: function(num, type) &#123; &#125;&#125;);","categories":[{"name":"JS插件","slug":"JS插件","permalink":"https://githuanyu.github.io/categories/JS插件/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://githuanyu.github.io/tags/jQuery/"}]},{"title":"hexo命令","slug":"hexo命令","date":"2018-05-15T08:10:21.000Z","updated":"2018-05-16T03:12:15.867Z","comments":true,"path":"2018/05/15/hexo命令/","link":"","permalink":"https://githuanyu.github.io/2018/05/15/hexo命令/","excerpt":"","text":"123456789101112131415161718192021222324npm install hexo-cli -gnpm install hexo --savehexo init//进入空白文件夹搭建脚手架，生成hexo项目框架hexo g//generate新的文件关系hexo s//server本地展示hexo d // 部署到github.iohexo d -g//在部署前先生成npm install hexo-deployer-git --save//安装扩展，否则 deloyer not found:githexo new post &quot;article title&quot;//发布新文章","categories":[{"name":"hexo","slug":"hexo","permalink":"https://githuanyu.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://githuanyu.github.io/tags/hexo/"},{"name":"cmd","slug":"cmd","permalink":"https://githuanyu.github.io/tags/cmd/"}]},{"title":"first demo","slug":"first-demo","date":"2018-05-15T03:11:15.000Z","updated":"2018-05-16T01:14:54.671Z","comments":true,"path":"2018/05/15/first-demo/","link":"","permalink":"https://githuanyu.github.io/2018/05/15/first-demo/","excerpt":"","text":"人在杭州已经叠甲十年","categories":[{"name":"闲聊","slug":"闲聊","permalink":"https://githuanyu.github.io/categories/闲聊/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-05-14T16:00:00.000Z","updated":"2018-05-16T03:12:14.116Z","comments":true,"path":"2018/05/15/hello-world/","link":"","permalink":"https://githuanyu.github.io/2018/05/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://githuanyu.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://githuanyu.github.io/tags/hexo/"},{"name":"cmd","slug":"cmd","permalink":"https://githuanyu.github.io/tags/cmd/"}]}]}